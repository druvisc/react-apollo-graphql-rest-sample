{"version":3,"sources":["components/ErrorBoundary/ErrorBoundary.js","utils.js","components/ExchangeRates/queries.js","components/ExchangeRates/ExchangeRates.js","components/App/App.js","index.js"],"names":["ErrorBoundary","props","state","error","errorInfo","this","errorRender","children","React","Component","padNumber","n","formatDate","date","getFullYear","getMonth","getDate","gql","GET_EXCHANGE_RATES_DATE","Now","Date","FormattedNow","ExchangeRates","initialDate","useState","setDate","formattedDate","useLazyQuery","variables","fetchPolicy","notifyOnNetworkStatusChange","getExchangeRates","called","loading","data","refetch","incrementDate","i","d","className","name","onClick","disabled","exchangeRates","Object","keys","rates","map","k","key","client","ApolloClient","link","RestLink","endpoints","exchangerates","uri","cache","InMemoryCache","App","ApolloProvider","ReactDOM","render","document","getElementById"],"mappings":"2TAEqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,MAFL,E,+EASDA,EAAOC,M,+BAKvB,OAAIC,KAAKH,MAAMC,MACTE,KAAKJ,MAAMK,YAAoBD,KAAKJ,MAAMK,YAAX,eAA4BD,KAAKJ,MAAjC,CAAwCE,MAAOE,KAAKH,MAAMC,SACtF,yDAGFE,KAAKJ,MAAMM,Y,gDAdYJ,GAC9B,MAAO,CAAEA,a,GAP8BK,IAAMC,W,gBCFpCC,EAAY,SAAAC,GAAC,gBAAOA,EAAI,GAAK,IAAM,IAAtB,OAA2BA,IACxCC,EAAa,SAAAC,GAAI,gBAAOA,EAAKC,cAAZ,YAA6BJ,EAAUG,EAAKE,WAAa,GAAzD,YAA+DL,EAAUG,EAAKG,a,8iBCCnEC,YAAH,KAA/B,IAUMC,EAA0BD,YAAH,KCP9BE,EAAM,IAAIC,KACVC,EAAeT,EAAWO,GAwDjBG,MAtDR,YAA+C,IAAD,IAArBC,mBAAqB,MAAPJ,EAAO,IAC3BK,mBAASD,GADkB,mBAC5CV,EAD4C,KACtCY,EADsC,KAE7CC,EAAgBd,EAAWC,GAFkB,EAGmBc,YACpET,EACA,CACEU,UAAW,CAAEf,KAAMa,GACnBG,YAAa,eAEbC,6BAA6B,IATkB,mBAG5CC,EAH4C,YAGxBC,EAHwB,EAGxBA,OAAQC,EAHgB,EAGhBA,QAAS9B,EAHO,EAGPA,MAAO+B,EAHA,EAGAA,KAAMC,EAHN,EAGMA,QAUnDC,EAAgB,SAAAC,GACpB,IAAMC,EAAI,IAAIlB,KAAKM,GACnBY,EAAEb,QAAQa,EAAEtB,UAAYqB,GACxBZ,EAAQa,IA6BV,OACE,oCACE,yBAAKC,UAAU,QAAQb,GACvB,mBA7BY,kBACd,6BACE,4BAAQc,KAAK,WAAWC,QAAS,kBAAML,GAAe,KAAtD,YACA,4BAAQI,KAAK,OAAOC,QAAS,kBAAMT,EAASG,IAAYJ,MAAxD,uBACA,4BAAQS,KAAK,OAAOE,SAAUhB,IAAkBL,EAAcoB,QAAS,kBAAML,EAAc,KAA3F,WAyBA,MACA,mBAvBU,WACZ,OAAKJ,EACDC,EAAgB,yCAChB9B,EAAc,4DACd+B,EAAKS,cAAc9B,OAASa,EAAsB,kEAAwCA,EAAxC,KAGpD,+BACE,+BACGkB,OAAOC,KAAKX,EAAKS,cAAcG,OAAOC,KAAI,SAAAC,GAAC,OAC1C,wBAAIC,IAAKD,GACP,4BAAKA,GACL,4BAAKd,EAAKS,cAAcG,MAAME,UAXpB,OAsBlB,QCnDAE,EAAS,IAAIC,IAAa,CAC9BC,KAAM,IAAIC,WAAS,CACjBC,UAAW,CACTC,cAAe,CACbC,IAAK,uCAIXC,MAAO,IAAIC,MAaEC,MAVf,WACE,OACE,kBAACC,EAAA,EAAD,CAAgBV,OAAQA,GACtB,kBAAC,EAAD,KACE,kBAAC,EAAD,SCjBRW,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b62f05be.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { error: null }\n  }\n\n  static getDerivedStateFromError(error) {\n    return { error }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // console.log(error, errorInfo)\n  }\n\n  render() {\n    if (this.state.error) {\n      if (this.props.errorRender) return this.props.errorRender({ ...this.props, error: this.state.error })\n      return <h1>Couldn't display element.</h1>\n    }\n\n    return this.props.children\n  }\n}\n\n// Sorry, Dan. \n// https://twitter.com/dan_abramov/status/890716011133100032\nexport const withErrorBoundary = Component =>\n  class extends ErrorBoundary {\n    render() {\n      if (this.state.error) {\n        if (this.props.errorRender) return this.props.errorRender({ ...this.props, error: this.state.error, })\n        return <h1>Couldn't display element.</h1>\n      }\n\n      return <Component {...this.props} />\n    }\n  }\n","export const padNumber = n => `${n < 10 ? '0' : ''}${n}`\nexport const formatDate = date => `${date.getFullYear()}-${padNumber(date.getMonth() + 1)}-${padNumber(date.getDate())}`\n","import { gql } from '@apollo/client'\n\nexport const GET_EXCHANGE_RATES_LATEST = gql`\n  query ExchangeRatesLatestQuery {\n    exchangeRates @rest(type: \"ExchangeRates\", endpoint: \"exchangerates\" path: \"latest/\") {\n      date\n      base\n      rates\n    }\n  }\n`\n\nexport const GET_EXCHANGE_RATES_DATE = gql`\n  query ExchangeRatesQuery($date: String!) {\n    exchangeRates(date: $date) @rest(type: \"ExchangeRates\", endpoint: \"exchangerates\" path: \"{args.date}\") {\n      _id: date\n      date\n      base\n      rates\n    }\n  }\n`\n","import React, { useState } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { formatDate } from '../../utils'\nimport { GET_EXCHANGE_RATES_DATE } from './queries'\n\nconst Now = new Date()\nconst FormattedNow = formatDate(Now)\n\nexport function ExchangeRates({ initialDate = Now }) {\n  const [date, setDate] = useState(initialDate)\n  const formattedDate = formatDate(date)\n  const [getExchangeRates, { called, loading, error, data, refetch }] = useLazyQuery(\n    GET_EXCHANGE_RATES_DATE,\n    {\n      variables: { date: formattedDate },\n      fetchPolicy: 'network-only',\n      // Re-render on network state change.\n      notifyOnNetworkStatusChange: true,\n    }\n  )\n\n  const incrementDate = i => {\n    const d = new Date(formattedDate)\n    d.setDate(d.getDate() + i)\n    setDate(d)\n  }\n\n  const Buttons = () =>\n    <div>\n      <button name='previous' onClick={() => incrementDate(-1)}>Previous</button>\n      <button name='load' onClick={() => called ? refetch() : getExchangeRates()}>Load exchange rates</button>\n      <button name='next' disabled={formattedDate === FormattedNow} onClick={() => incrementDate(1)}>Next</button>\n    </div>\n\n  const Rates = () => {\n    if (!called) return null\n    if (loading) return <p>Loading...</p>\n    if (error) return <p>Couldn't load exchange rates.</p>\n    if (data.exchangeRates.date !== formattedDate) return <p>Exchange rates aren't available for {formattedDate}.</p>\n\n    return (\n      <table>\n        <tbody>\n          {Object.keys(data.exchangeRates.rates).map(k =>\n            <tr key={k}>\n              <td>{k}</td>\n              <td>{data.exchangeRates.rates[k]}</td>\n            </tr>)}\n        </tbody>\n      </table>\n    )\n  }\n\n  return (\n    <>\n      <div className='date'>{formattedDate}</div>\n      <Buttons />\n      <Rates />\n    </>\n  )\n}\n\nexport default ExchangeRates\n\n","import React from 'react'\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { RestLink } from 'apollo-link-rest'\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary'\nimport ExchangeRates from '../ExchangeRates/ExchangeRates'\n\nconst client = new ApolloClient({\n  link: new RestLink({\n    endpoints: {\n      exchangerates: {\n        uri: 'https://api.exchangeratesapi.io/'\n      }\n    }\n  }),\n  cache: new InMemoryCache(),\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <ErrorBoundary>\n        <ExchangeRates />\n      </ErrorBoundary>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}